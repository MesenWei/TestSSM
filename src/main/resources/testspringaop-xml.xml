<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="aopadvice" class="com.demo.java.aop.springaop.pojo.Advice"/>

    <bean id="testaop" class="com.demo.java.aop.springaop.pojo.TestAOP"/>

    <!--启用aop代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <aop:config>
        <!--切入点：想要对某些类中方法进行特殊管理（如权限、日志）。切入点的类必须被spring管理到才可以。-->
        <aop:pointcut id="target" expression="execution(* com.demo.java.aop.springaop.pojo.*.*(..))" />
        <!--切面：切入点里面的所有方法值执行时，会通知到id="aopClass"的bean，不同的通知，会调用其对应的方法。-->
        <aop:aspect id="myAop" ref="aopadvice">
            <!--以下5个均为通知，即方法执行的时候会产生通知，指定产生通知后对应的方法，很明显产生通知对应的切面肯定是id="myAop"了-->
            <aop:before method="beforeMethod" pointcut-ref="target"/>
            <aop:after method="afterMethod" pointcut-ref="target"/>
            <aop:after-returning method="afterReturn" pointcut-ref="target" returning="result"/>
            <aop:after-throwing method="afterThrowing" pointcut-ref="target" throwing="ex"/>
            <aop:around method="aroundMethod" pointcut-ref="target"/>
        </aop:aspect>
    </aop:config>
</beans>