AOP核心概念
1、横切关注点
对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点
2、切面（aspect）
类是对物体特征的抽象，切面就是对横切关注点的抽象
3、连接点（joinpoint）
被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器
4、切入点（pointcut）
对连接点进行拦截的定义
5、通知（advice）
所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类
6、目标对象
代理的目标对象
7、织入（weave）
将切面应用到目标对象并导致代理对象创建的过程
8、引入（introduction）
在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段

切点函数
execution()：
    满足匹配模式字符串的所有目标类方法的连接点。
    编写在通知上或切点上。
@annotation()：
    任何标注了指定注解的目标方法的连接点。
    编写在切点上或通知上。
args()：
    编写在通知上。
    用于匹配当前执行的方法传入的参数为指定类型的执行方法；参数类型列表中的参数必须是完整类名，通配符不支持；args属于动态切入点，这种切入点开销非常大，非特殊情况最好不要使用；
    一般和execution一起使用。
@args()：
    目标类方法参数中是否有指定特定注解的连接点。
    编写在切点上或通知上。
within()：
    匹配指定的包下的所有的连接点。
    编写在通知上。
@within()：
    匹配拥有指定注解的类内的连接点。
    编写在切点上或通知上。
target()：
    编写在通知上。
    用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配；注意target中使用的表达式必须是完整类名，不支持通配符；
@target()：
    匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解。
    编写在切点上或通知上。
this()：
    编写在通知上。
    用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配；注意this中使用的表达式必须是完整类名，不支持通配符；
